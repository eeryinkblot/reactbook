{"version":3,"sources":["components/Excel.tsx","excelData.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Excel","props","preSearchData","toggleSearch","e_ignore","state","search","setState","data","e","needle","target","value","toLowerCase","index","dataset","filteredData","filter","row","indexOf","sort","column","cellIndex","Array","from","descending","sortBy","sortedData","a","b","showEditor","edit","parseInt","save","preventDefault","input","firstChild","initialData","this","renderToolbar","renderTable","onClick","className","onChange","headers","map","_ignore","type","data-index","icon","headerElements","title","onDoubleClick","renderSearch","rowIndex","content","data-row","onSubmit","defaultValue","React","Component","output","App","excelData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1958359.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Excel extends React.Component<any, {\n    data: Array<Array<string>>,\n    sortBy: number | null,\n    descending: boolean,\n    edit: { row: number, column: number } | null,\n    search: boolean,\n}> {\n\n    private preSearchData: any;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            data: props.initialData,\n            sortBy: null,\n            descending: false,\n            edit: null,\n            search: false,\n        };\n\n        this.preSearchData = null;\n    }\n\n    toggleSearch = (e_ignore: any) => {\n        if (this.state.search) {\n            this.setState({\n                search: false,\n                data: this.preSearchData,\n            });\n        } else {\n            this.preSearchData = this.state.data;\n            this.setState({\n                search: true,\n            });\n        }\n    }\n\n    search = (e: any) => {\n        const needle = e.target.value.toLowerCase();\n        if (!needle) {\n            this.setState({data: this.preSearchData});\n        }\n\n        const index = e.target.dataset.index;\n        let filteredData = this.preSearchData.filter((row: any) => {\n            return row[index].toLowerCase().indexOf(needle) > -1;\n        });\n        this.setState({data: filteredData});\n    }\n\n    sort = (e: any) => {\n        const column = e.target.cellIndex;\n        const data = Array.from(this.state.data);\n\n        const descending = this.state.sortBy === column && !this.state.descending;\n        const sortedData = data.sort((a: Array<string>, b: Array<string>) => {\n            return descending\n                ? a[column] < b[column] ? 1 : -1\n                : a[column] > b[column] ? 1 : -1;\n        });\n        this.setState({\n            data: sortedData,\n            sortBy: column,\n            descending: descending,\n        });\n    }\n\n    showEditor = (e: any) => {\n        this.setState({\n            edit: {\n                row: parseInt(e.target.dataset.row, 10),\n                column: e.target.cellIndex,\n            }\n        });\n    }\n\n    save = (e: any) => {\n        e.preventDefault();\n\n        const input = e.target.firstChild;\n        const data = Array.from(this.state.data);\n\n        if (this.state.edit) {\n            data[this.state.edit.row][this.state.edit.column] = input.value;\n        }\n\n        this.setState({\n            data: data,\n            edit: null,\n        });\n    }\n\n    render() {\n        return <div>\n            {this.renderToolbar()}\n            {this.renderTable()}\n        </div>;\n    }\n\n    private renderToolbar() {\n        return <button onClick={this.toggleSearch} className=\"toolbar\">Suchen</button>;\n    }\n\n    private renderSearch() {\n        return (<tr onChange={this.search}>\n            {this.props.headers.map((_ignore: any, index: number) =>\n                <td key={index}>\n                    <input type=\"text\" data-index={index}/>\n                </td>)}\n        </tr>);\n    }\n\n    private renderTable() {\n        const headers = this.props.headers;\n        const data = this.state.data;\n        const edit = this.state.edit;\n\n        let icon: any = null;\n        if (this.state.descending) {\n            icon = ' \\u2193';\n        } else {\n            icon = ' \\u2191';\n        }\n\n        const headerElements =\n            headers.map((title: string, index: number) =>\n                <th key={index}>{title}{this.state.sortBy === index && icon}</th>\n            );\n\n        return (\n            <table>\n                <thead onClick={this.sort}>\n                <tr>\n                    {headerElements}\n                </tr>\n                </thead>\n                <tbody onDoubleClick={this.showEditor}>\n                {this.state.search && this.renderSearch()}\n                {data.map((row: Array<string>, rowIndex: number) =>\n                    <tr key={rowIndex}>\n                        {row.map((content: string, index: number) =>\n                            <td key={index} data-row={rowIndex}>\n                                {edit && edit.row === rowIndex && edit.column === index &&\n                                <form onSubmit={this.save}>\n                                    <input type=\"text\" defaultValue={content}/>\n                                </form>\n                                }\n                                {edit && (edit.row !== rowIndex || edit.column !== index) && content}\n                                {!edit && content}\n                            </td>\n                        )}\n                    </tr>\n                )}\n                </tbody>\n            </table>\n        );\n    }\n\n}","const headers = [\n    \"Buch\", \"Autor\", \"Sprache\", \"veröffentlicht\", \"Verkäufe\"\n];\n\nconst data = [\n    [\"Der Herr der Ringe\", \"J. R. R. Tolkien\", \"Englisch\", \"1954-1955\", \"150 Millionen\"],\n    [\"Der kleine Prinz\", \"Antoine de Saint-Exupéry\", \"Französisch\", \"1943\", \"140 Millionen\"],\n    [\"Harry Potter und der Stein der Weisen\", \"J. K. Rowling\", \"Englisch\", \"1997\", \"107 Millionen\"],\n    [\"Und dann gabs keines mehr\", \"Agatha Christie\", \"Englisch\", \"1939\", \"100 Millionen\"],\n    [\"Der Traum der roten Kammer\", \"Cáo Xuèqín\", \"Chinesisch\", \"1754-1791\", \"100 Millionen\"],\n    [\"Der Hobbit\", \"J. R. R. Tolkien\", \"Englisch\", \"1937\", \"100 Millionen\"],\n    [\"Sie\", \"H. Rider Haggard\", \"Englisch\", \"1887\", \"100 Millionen\"]\n];\n\nconst output = [headers, data];\nexport default output;","import React from 'react';\nimport '../App.css';\nimport Excel from \"./Excel\";\nimport excelData from \"../excelData\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Excel headers={excelData[0]}\n               initialData={excelData[1]} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}